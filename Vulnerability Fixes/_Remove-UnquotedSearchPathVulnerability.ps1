$BaseKeys = "HKLM:\System\CurrentControlSet\Services",                                  #Services
           "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall",                #32bit Uninstalls
           "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall"     #64bit Uninstalls

$Values = New-Object System.Collections.ArrayList

$DiscKeys = Get-ChildItem -Recurse -Directory $BaseKeys -ErrorAction SilentlyContinue |
            Select-Object -ExpandProperty Name | ForEach-Object{($_.ToString().Split('\') | Select-Object -Skip 1) -join '\'}

$Registry = [Microsoft.Win32.RegistryKey]::OpenBaseKey('LocalMachine', 'Default')

function Fix-Vulnerability{
    $RegType = $ParentKey.GetValueKind($Match)
    $Correction = "$([char]34)$($Matches[1])$([char]34)$($Matches[2])"

    Try { $ParentKey.SetValue("$Match", "$Correction", [Microsoft.Win32.RegistryValueKind]::$RegType) }
    Catch { Write-Debug "Unable to write to $ParentKey" }
    $Values.Add((New-Object PSObject -Property @{
        "Computername" = $env:COMPUTERNAME
        "Name" = $Match
        "Type" = $RegType
        "Value" = $Value
        "Correction" = $Correction
        "ParentKey" = "HKEY_LOCAL_MACHINE\$RegKey"
    })) | Out-Null
}

ForEach ($RegKey in $DiscKeys)
{
    Try { $ParentKey = $Registry.OpenSubKey($RegKey, $True) }
    Catch { Write-Debug "Unable to open $RegKey" }

    If ($ParentKey.ValueCount -gt 0)
    {
        $MatchedValues = $ParentKey.GetValueNames() | Where-Object{ $_ -eq "ImagePath" -or $_ -eq "UninstallString" }
        ForEach ($Match in $MatchedValues)
        {
            $ValueRegEx = '(^(?!\u0022).*\s.*\.[Ee][Xx][Ee](?<!\u0022))(.*$)'
            $Value = $ParentKey.GetValue($Match)

            ##Uninstall Strings
            if($MatchedValues -eq "UninstallString"){
                If ($Value -match $ValueRegEx)
                {
                    if($Value -like "*Microsoft Help Viewer 1.1*" -or $Value -like "*Microsoft Visual Studio 2010*"  -or $Value -like "*VideoLAN*")
                    {
                        Fix-Vulnerability
                    }
                }
            }

            ##Service Strings
            else{
                If ($Value -match $ValueRegEx)
                {
                    write-host "Fixing vulnerable service: " $Value -ForegroundColor Yellow
                    Fix-Vulnerability
                }
            }
        }
    }
    $ParentKey.Close()
}
$Registry.Close()
if($Values)
{
  $Values | Select-Object Computername,ParentKey,Value,Correction,Name
}
else
{
  Write-Host "No vulnerabilities found!"
}